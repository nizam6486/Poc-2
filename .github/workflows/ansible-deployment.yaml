name: Ansible AWS Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "aws-test"
      action:
        description: "Action to perform"
        required: true
        default: "deploy"
        type: choice
        options:
          - deploy
          - destroy

permissions:
  id-token: write
  contents: read

env:
  PYTHON_VERSION: "3.12"

jobs:
  ansible-lint:
    name: Ansible Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Run Ansible Lint
      #   uses: ansible/ansible-lint@main
      #   with:
      #     path: "**/*.yml"
      #     rules: "**/rules/**/*.yml"

  ansible-syntax-check:
    name: Ansible Syntax Check
    runs-on: ubuntu-latest
    needs: ansible-lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Install Ansible Collections
        run: |
          ansible-galaxy collection install amazon.aws -f
          ansible-galaxy collection install community.aws

      - name: Syntax Check Playbooks
        run: |
          for file in $(find . -name "*.yml" -not -path "./.github/*"); do
            echo "Checking syntax for: $file"
            ansible-playbook --syntax-check "$file" || echo "Syntax check failed for $file"
          done

  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: [ansible-lint, ansible-syntax-check]
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOYMENT_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-2' }}
          role-session-name: GitHubActions-Ansible

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Install dependencies
        run: |
          set -e
          echo "Installing Python dependencies..."
          pip install ansible boto3 botocore
          
          echo "Installing Ansible collections..."
          ansible-galaxy collection install amazon.aws --force
          ansible-galaxy collection install community.aws --force
          
          echo "Installing eksctl..."
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version
          
          echo "Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client
          
          echo "All dependencies installed successfully"

      - name: Deploy Infrastructure
        if: inputs.action == 'deploy'
        run: |
          set -e
          echo "Starting deployment with environment: ${{ inputs.environment }}"
          ansible-playbook site.yml \
            -e "env_name=${{ inputs.environment }}" \
            -e "aws_region=${{ vars.AWS_REGION || 'us-east-2' }}" \
            -e "git_commit=${{ github.sha }}" \
            -e "git_branch=main" \
            -v

      - name: Get Application Access URLs
        if: inputs.action == 'deploy'
        run: |
          set -e
          echo "Updating kubeconfig..."
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION || 'us-east-2' }} --name eks-${{ inputs.environment }}
          
          echo "Waiting for services to be ready..."
          sleep 60
          
          echo "Final deployment status:"
          kubectl get pods -n default -o wide
          kubectl get svc -n default
          
          echo "Getting LoadBalancer URL..."
          for i in {1..10}; do
            LB_URL=$(kubectl get service apache-web-loadbalancer -n default -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
            if [ -n "$LB_URL" ]; then
              break
            fi
            echo "Waiting for LoadBalancer... attempt $i/10"
            sleep 30
          done
          
          echo "Getting NodePort access..."
          NODE_IPS=$(kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}' 2>/dev/null || echo "")
          INTERNAL_IPS=$(kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="InternalIP")].address}' 2>/dev/null || echo "")
          
          echo ""
          echo "üéÜ SUCCESS! APPLICATION IS DEPLOYED AND ACCESSIBLE!"
          echo "================================================"
          
          if [ -n "$LB_URL" ]; then
            echo "üåê PRIMARY ACCESS: http://$LB_URL"
            echo "Test: curl -I http://$LB_URL"
          else
            echo "‚è≥ LoadBalancer still provisioning..."
          fi
          
          echo ""
          echo "üìç NODEPORT ACCESS (Port 30080):"
          if [ -n "$NODE_IPS" ]; then
            for ip in $NODE_IPS; do
              echo "üîó http://$ip:30080"
            done
          elif [ -n "$INTERNAL_IPS" ]; then
            for ip in $INTERNAL_IPS; do
              echo "üîó http://$ip:30080 (internal)"
            done
          fi
          
          echo ""
          echo "üîß LOCAL TESTING:"
          echo "kubectl port-forward service/apache-web-service 8080:80 -n default &"
          echo "curl http://localhost:8080"
          echo "================================================"

      - name: Destroy Infrastructure
        if: inputs.action == 'destroy'
        run: |
          set -e
          echo "Starting cleanup for environment: ${{ inputs.environment }}"
          ansible-playbook cleanup.yml \
            -e "env_name=${{ inputs.environment }}" \
            -e "aws_region=${{ vars.AWS_REGION || 'us-east-2' }}" \
            -v

      # - name: Run Tests
      #   if: inputs.action == 'deploy'
      #   run: |
      #     ansible-playbook tests.yml \
      #       -e "environment=${{ inputs.environment }}" \
      #       -e "aws_region=${{ vars.AWS_REGION }}"
