---
- name: Create VPC
  amazon.aws.ec2_vpc_net:
    name: "{{ cluster_name }}-vpc"
    cidr_block: "{{ vpc_cidr }}"
    region: "{{ region }}"
    tags:
      Environment: "{{ cluster_name }}"
    state: present
  register: vpc

- name: Create Internet Gateway
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ region }}"
    tags:
      Name: "{{ cluster_name }}-igw"
    state: present
  register: igw

- name: Create public subnets
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: "{{ item.cidr }}"
    region: "{{ region }}"
    az: "{{ region }}{{ item.az }}"
    map_public: true
    tags:
      Name: "{{ cluster_name }}-public-{{ item.az }}"
      kubernetes.io/role/elb: "1"
    state: present
  loop:
    - { cidr: "{{ public_subnet_cidrs[0] }}", az: "a" }
    - { cidr: "{{ public_subnet_cidrs[1] }}", az: "b" }
  register: public_subnets

- name: Create private subnets
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: "{{ item.cidr }}"
    region: "{{ region }}"
    az: "{{ region }}{{ item.az }}"
    tags:
      Name: "{{ cluster_name }}-private-{{ item.az }}"
      kubernetes.io/role/internal-elb: "1"
    state: present
  loop:
    - { cidr: "{{ private_subnet_cidrs[0] }}", az: "a" }
    - { cidr: "{{ private_subnet_cidrs[1] }}", az: "b" }
  register: private_subnets

- name: Create Elastic IP for NAT Gateway
  amazon.aws.ec2_eip:
    in_vpc: true
    region: "{{ region }}"
    tags:
      Name: "{{ cluster_name }}-nat-eip"
  register: nat_eip

- name: Create NAT Gateway
  amazon.aws.ec2_vpc_nat_gateway:
    subnet_id: "{{ public_subnets.results[0].subnet.id }}"
    allocation_id: "{{ nat_eip.allocation_id }}"
    region: "{{ region }}"
    tags:
      Name: "{{ cluster_name }}-nat-gw"
  register: nat_gw

- name: Create route table for public subnets
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ region }}"
    tags:
      Name: "{{ cluster_name }}-public-rt"
    subnets:
      - "{{ public_subnets.results[0].subnet.id }}"
      - "{{ public_subnets.results[1].subnet.id }}"
    routes:
      - dest: "0.0.0.0/0"
        gateway_id: "{{ igw.gateway_id }}"

- name: Create route table for private subnets
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ region }}"
    tags:
      Name: "{{ cluster_name }}-private-rt"
    subnets:
      - "{{ private_subnets.results[0].subnet.id }}"
      - "{{ private_subnets.results[1].subnet.id }}"
    routes:
      - dest: "0.0.0.0/0"
        nat_gateway_id: "{{ nat_gw.nat_gateway_id }}"

- name: Create EKS cluster service role
  amazon.aws.iam_role:
    name: "{{ cluster_name }}-cluster-role"
    assume_role_policy_document: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "eks.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      }
    managed_policies:
      - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
    state: present

- name: Create EKS node group service role
  amazon.aws.iam_role:
    name: "{{ cluster_name }}-node-role"
    assume_role_policy_document: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "ec2.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      }
    managed_policies:
      - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
      - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
    state: present

- name: Wait for IAM role propagation
  pause:
    seconds: 30

- name: Delete failed CloudFormation stack if exists
  amazon.aws.cloudformation:
    stack_name: "{{ cluster_name }}-stack"
    state: absent
    region: "{{ region }}"
  ignore_errors: true

- name: Wait for stack deletion
  pause:
    seconds: 30

- name: Create EKS cluster using CloudFormation
  amazon.aws.cloudformation:
    stack_name: "{{ cluster_name }}-stack"
    state: present
    region: "{{ region }}"
    template_body: |
      AWSTemplateFormatVersion: '2010-09-09'
      Resources:
        EKSCluster:
          Type: AWS::EKS::Cluster
          Properties:
            Name: {{ cluster_name }}
            Version: "{{ kubernetes_version }}"
            RoleArn: arn:aws:iam::{{ ansible_account_id }}:role/{{ cluster_name }}-cluster-role
            ResourcesVpcConfig:
              SubnetIds:
                - {{ public_subnets.results[0].subnet.id }}
                - {{ public_subnets.results[1].subnet.id }}
                - {{ private_subnets.results[0].subnet.id }}
                - {{ private_subnets.results[1].subnet.id }}
        EKSNodeGroup:
          Type: AWS::EKS::Nodegroup
          Properties:
            ClusterName: !Ref EKSCluster
            NodegroupName: {{ node_group_name }}
            NodeRole: arn:aws:iam::{{ ansible_account_id }}:role/{{ cluster_name }}-node-role
            Subnets:
              - {{ private_subnets.results[0].subnet.id }}
              - {{ private_subnets.results[1].subnet.id }}
            InstanceTypes:
              - {{ node_instance_type }}
            ScalingConfig:
              MinSize: {{ node_min_size }}
              MaxSize: {{ node_max_size }}
              DesiredSize: {{ node_desired_capacity }}
      Outputs:
        ClusterName:
          Value: !Ref EKSCluster
        ClusterEndpoint:
          Value: !GetAtt EKSCluster.Endpoint
  register: cf_result

- name: Generate kubeconfig
  shell: aws eks update-kubeconfig --region {{ region }} --name {{ cluster_name }}

- name: Install EBS CSI driver addon
  shell: |
    aws eks create-addon \
      --cluster-name {{ cluster_name }} \
      --addon-name aws-ebs-csi-driver \
      --region {{ region }}
  ignore_errors: true

- name: Wait for EBS CSI driver to be active
  shell: aws eks wait addon-active --cluster-name {{ cluster_name }} --addon-name aws-ebs-csi-driver --region {{ region }}
  ignore_errors: true

- name: Display cluster information
  debug:
    msg:
      - "EKS Cluster: {{ cluster_name }} created successfully"
      - "Region: {{ region }}"
      - "CloudFormation Stack: {{ cluster_name }}-stack"
      - "EBS CSI Driver: Installed"
      - "Kubeconfig updated at ~/.kube/config"