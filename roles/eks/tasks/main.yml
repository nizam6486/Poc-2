---
- name: Gather existing VPC information
  amazon.aws.ec2_vpc_net_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Environment": "{{ env_name }}"
      "tag:ManagedBy": "ansible"
  register: vpc_info

- name: Gather existing public subnets
  amazon.aws.ec2_vpc_subnet_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Environment": "{{ env_name }}"
      "tag:Type": "public"
  register: public_subnets_info

- name: Get existing EKS Cluster Role (Control Plane)
  amazon.aws.iam_role_info:
    name: "eks-cluster-role"
  register: cluster_role_info

- name: Get existing EKS Node Group Role (Worker Nodes)
  amazon.aws.iam_role_info:
    name: "eks-nodegroup-role"
  register: nodegroup_role_info

- name: Get existing EKS Control Plane Security Group
  amazon.aws.ec2_security_group_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "eks-controlplane-{{ env_name }}"
      "tag:Environment": "{{ env_name }}"
  register: control_plane_sg_info

- name: Get existing EKS Worker Nodes Security Group
  amazon.aws.ec2_security_group_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "eks-workernodes-{{ env_name }}"
      "tag:Environment": "{{ env_name }}"
  register: worker_nodes_sg_info

- name: Set facts for EKS configuration
  set_fact:
    vpc_id: "{{ vpc_info.vpcs[0].id }}"
    public_subnet_ids: "{{ public_subnets_info.subnets | map(attribute='id') | list }}"
    cluster_role_arn: "{{ cluster_role_info.iam_roles[0].arn }}"
    nodegroup_role_arn: "{{ nodegroup_role_info.iam_roles[0].arn }}"
    control_plane_sg_id: "{{ control_plane_sg_info.security_groups[0].group_id }}"
    worker_nodes_sg_id: "{{ worker_nodes_sg_info.security_groups[0].group_id }}"

- name: Debug all existing resources
  debug:
    msg: |
      ðŸ”— USING EXISTING ANSIBLE RESOURCES:
      - VPC: {{ vpc_id }}
      - Public Subnets: {{ public_subnet_ids }}
      - Cluster Role ARN: {{ cluster_role_arn }}
      - Node Role ARN: {{ nodegroup_role_arn }}
      - Control Plane SG: {{ control_plane_sg_id }}
      - Worker Nodes SG: {{ worker_nodes_sg_id }}

- name: Validate all resources exist
  block:
    - name: Validate public subnets exist
      fail:
        msg: "No public subnets found for environment '{{ env_name }}'. Cannot deploy EKS cluster."
      when: public_subnet_ids | length == 0

    - name: Validate IAM roles exist
      fail:
        msg: |
          Missing IAM roles for EKS cluster:
          - Cluster Role: {{ cluster_role_info.iam_roles | length > 0 }}
          - Node Group Role: {{ nodegroup_role_info.iam_roles | length > 0 }}
      when: cluster_role_info.iam_roles | length == 0 or nodegroup_role_info.iam_roles | length == 0

    - name: Validate security groups exist
      fail:
        msg: |
          Missing security groups for EKS cluster:
          - Control Plane SG: {{ control_plane_sg_info.security_groups | length > 0 }}
          - Worker Nodes SG: {{ worker_nodes_sg_info.security_groups | length > 0 }}
      when: control_plane_sg_info.security_groups | length == 0 or worker_nodes_sg_info.security_groups | length == 0

- name: Generate eksctl cluster config
  template:
    src: cluster-config.yaml.j2
    dest: /tmp/cluster-config.yaml

- name: Check if EKS cluster exists
  shell: eksctl get cluster --name {{ eks_cluster_name }} --region {{ aws_region }}
  register: cluster_exists
  ignore_errors: true

- name: Create EKS cluster with eksctl
  shell: eksctl create cluster -f /tmp/cluster-config.yaml
  when: cluster_exists.rc != 0

- name: Create nodegroup only if cluster exists
  shell: eksctl create nodegroup -f /tmp/cluster-config.yaml
  when: cluster_exists.rc == 0
  ignore_errors: true
