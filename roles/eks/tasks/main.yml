---
- name: Gather existing VPC information
  amazon.aws.ec2_vpc_net_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Environment": "{{ env_name }}"
      "tag:ManagedBy": "ansible"
  register: vpc_info

- name: Gather existing public subnets
  amazon.aws.ec2_vpc_subnet_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Environment": "{{ env_name }}"
      "tag:Type": "public"
  register: public_subnets_info

- name: Get existing EKS Cluster Role (Control Plane)
  amazon.aws.iam_role_info:
    name: "eks-cluster-role"
  register: cluster_role_info

- name: Get existing EKS Node Group Role (Worker Nodes)
  amazon.aws.iam_role_info:
    name: "eks-nodegroup-role"
  register: nodegroup_role_info

- name: Set facts for EKS configuration
  set_fact:
    vpc_id: "{{ vpc_info.vpcs[0].id }}"
    public_subnet_ids: "{{ public_subnets_info.subnets | map(attribute='id') | list }}"
    cluster_role_arn: "{{ cluster_role_info.iam_roles[0].arn }}"
    nodegroup_role_arn: "{{ nodegroup_role_info.iam_roles[0].arn }}"

- name: Generate unique cluster name
  set_fact:
    unique_cluster_name: "eks-{{ env_name }}-{{ ansible_date_time.epoch }}"

- name: Create EKS cluster using AWS CLI
  shell: |
    aws eks create-cluster \
      --name {{ unique_cluster_name }} \
      --version {{ eks_version }} \
      --role-arn {{ cluster_role_arn }} \
      --resources-vpc-config subnetIds={{ public_subnet_ids | join(',') }} \
      --region {{ aws_region }}
  register: cluster_creation
  ignore_errors: true

- name: Wait for cluster to be active
  shell: aws eks wait cluster-active --name {{ unique_cluster_name }} --region {{ aws_region }}
  when: cluster_creation.rc == 0

- name: Create managed nodegroup
  shell: |
    aws eks create-nodegroup \
      --cluster-name {{ unique_cluster_name }} \
      --nodegroup-name {{ nodegroup_name }} \
      --subnets {{ public_subnet_ids | join(' ') }} \
      --node-role {{ nodegroup_role_arn }} \
      --instance-types {{ nodegroup_instance_types[0] }} \
      --scaling-config minSize={{ nodegroup_min_size }},maxSize={{ nodegroup_max_size }},desiredSize={{ nodegroup_desired_size }} \
      --disk-size {{ nodegroup_disk_size }} \
      --ami-type {{ nodegroup_ami_type }} \
      --capacity-type {{ nodegroup_capacity_type }} \
      --region {{ aws_region }}
  when: cluster_creation.rc == 0

- name: Wait for nodegroup to be active
  shell: aws eks wait nodegroup-active --cluster-name {{ unique_cluster_name }} --nodegroup-name {{ nodegroup_name }} --region {{ aws_region }}
  when: cluster_creation.rc == 0

- name: Get current AWS identity
  shell: aws sts get-caller-identity --query Arn --output text
  register: current_identity

- name: Create EKS access entry for deployment role
  shell: |
    aws eks create-access-entry \
      --cluster-name {{ unique_cluster_name }} \
      --principal-arn {{ current_identity.stdout }} \
      --type STANDARD \
      --region {{ aws_region }}
  ignore_errors: true

- name: Associate admin policy to access entry
  shell: |
    aws eks associate-access-policy \
      --cluster-name {{ unique_cluster_name }} \
      --principal-arn {{ current_identity.stdout }} \
      --policy-arn arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy \
      --access-scope type=cluster \
      --region {{ aws_region }}
  ignore_errors: true

- name: Update cluster name for subsequent tasks
  set_fact:
    eks_cluster_name: "{{ unique_cluster_name }}"