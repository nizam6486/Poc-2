---
- name: Update kubeconfig for EKS cluster
  shell: aws eks update-kubeconfig --region {{ aws_region }} --name {{ eks_cluster_name }}
  environment:
    AWS_DEFAULT_REGION: "{{ aws_region }}"

- name: Wait for EKS cluster to be ready
  shell: kubectl get nodes
  register: nodes_status
  until: nodes_status.rc == 0
  retries: 10
  delay: 30

- name: Generate Apache Kubernetes manifest
  template:
    src: apache-deployment.yaml.j2
    dest: /tmp/apache-deployment.yaml

- name: Deploy Apache to EKS cluster
  shell: kubectl apply -f /tmp/apache-deployment.yaml

- name: Wait for deployment to be ready
  shell: kubectl wait --for=condition=available --timeout=300s deployment/{{ apache_app_name }} -n {{ apache_namespace }}
  register: deployment_ready
  ignore_errors: true

- name: Get worker node external IPs
  shell: kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}'
  register: node_external_ips
  ignore_errors: true

- name: Get LoadBalancer external hostname
  shell: kubectl get service {{ apache_app_name }}-loadbalancer -n {{ apache_namespace }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
  register: lb_hostname
  ignore_errors: true
  retries: 5
  delay: 30

- name: Display comprehensive access information
  debug:
    msg: |
      üöÄ APACHE WEB SERVER DEPLOYMENT COMPLETE!
      
      üìä DEPLOYMENT STATUS:
      {{ deployment_ready.stdout | default('Deployment status check failed') }}
      
      üåê ACCESS YOUR APPLICATION:
      
      1. LoadBalancer URL (Recommended):
         http://{{ lb_hostname.stdout | default('Still provisioning - wait 2-3 minutes') }}
      
      2. NodePort Access:
         {% if node_external_ips.stdout %}
         {% for ip in node_external_ips.stdout.split() %}
         http://{{ ip }}:{{ apache_nodeport }}
         {% endfor %}
         {% else %}
         Get node IPs: kubectl get nodes -o wide
         Then use: http://NODE_EXTERNAL_IP:{{ apache_nodeport }}
         {% endif %}
      
      3. Port Forward (for testing):
         kubectl port-forward service/{{ apache_app_name }}-service 8080:80 -n {{ apache_namespace }}
         Then access: http://localhost:8080
      
      üîç TROUBLESHOOTING COMMANDS:
      - Check pods: kubectl get pods -n {{ apache_namespace }}
      - Check services: kubectl get svc -n {{ apache_namespace }}
      - Check logs: kubectl logs -l app={{ apache_app_name }} -n {{ apache_namespace }}
      - Check nodes: kubectl get nodes -o wide